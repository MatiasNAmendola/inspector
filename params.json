{"name":"Inspector","body":"# Inspector\r\n\r\n> inspector [inˈspektər] - noun -  an official employed to ensure that official regulations are obeyed.\r\n\r\nInspector is your validations handler for PHP applications. Inspector is easy to use and easy to learn and imposes rules on the payload supplied.\r\n\r\n## Validaton examples\r\n\r\n### Valid payload\r\n\r\n```php\r\n<?php\r\n// Example payload that is\r\n$data = array(\r\n  \"username\" => \"simon\",\r\n  \"email\" => \"simon@localhost.local\",\r\n  \"password\" => \"secret\",\r\n  \"password_confirmation\" => \"secret\"\r\n);\r\n\r\n// Create a new instance of inspector\r\n$inspector = new Inspector($data);\r\n\r\n// Ensure that the data is valid\r\n$inspector->ensure(\"username\")\r\n  ->isAlpha(\"is not only alpha characters\")\r\n  ->isMin(3, \"is to short\")\r\n  ->isMax(10, \"is to long\");\r\n\r\n$inspector->ensure(\"email\")\r\n  ->isValidEmail(\"is not valid\")\r\n  ->notNull(\"is empty\");\r\n\r\n$inspector->ensure(\"password\")\r\n  ->isSame(\"password_confirmation\", \"don't correspond\")\r\n  ->isMin(6, \"is to short\");\r\n\r\n// Check if any errors exist\r\necho $inspector->hasErrors(); // Returns false\r\n\r\n// Throw a exception if there are errors\r\n$inspector->validate(); // Returns false\r\n```\r\n\r\n### Invalid payload\r\n\r\n```php\r\n<?php\r\n// Example payload that is valid\r\n$data = array(\r\n  \"username\" => \"s\",\r\n  \"email\" => \"simon@--\",\r\n  \"password\" => \"s\",\r\n  \"password_confirmation\" => \"b\"\r\n);\r\n\r\n// Create a new instance of inspector\r\n$inspector = new Inspector($data);\r\n\r\n// Ensure that the data is valid\r\n$inspector->ensure(\"username\")\r\n  ->isAlpha(\"is not only alpha characters\")\r\n  ->isMin(3, \"is to short\")\r\n  ->isMax(10, \"is to long\");\r\n\r\n$inspector->ensure(\"email\")\r\n  ->isValidEmail(\"is not valid\")\r\n  ->notNull(\"can not be empty\");\r\n\r\n$inspector->ensure(\"password\")\r\n  ->isSame(\"password_confirmation\", \"don't correspond\")\r\n  ->isMin(6, \"is to short\");\r\n\r\necho $inspector->hasErrors(); // Returns true\r\n\r\nprint_r($inspector->errors());\r\n\r\n/*\r\nArray\r\n(\r\n  [username] => Array\r\n    (\r\n      [0] => is to short\r\n    )\r\n  [email] => Array\r\n    (\r\n      [0] => is not valid\r\n    )\r\n  [password] => Array\r\n    (\r\n      [0] => don't correspond\r\n      [1] => is to short\r\n    )\r\n)\r\n*/\r\n\r\n// If you like you can throw an InspectorException\r\n\r\n$inspector->validate(); // InspectorException\r\n```\r\n\r\n## Available validations\r\n\r\nInspector comes loaded with a few default validators.\r\n\r\n```\r\nisNull() / notNull()                     - Check if payload is null\r\nisMax($int) / notMax($int)               - Check length of string\r\nisMin($int) / notMin($int)               - Check length of string\r\nisFloat() / notFloat()                   - Check if payload is a float\r\nisInt() / notInt()                       - Check if payload is a int\r\nisUrl() / notUrl()                       - Check if payload is a URL\r\nisEmail() / notEmail()                   - Check if payload is a e-mail\r\nisIp() / notIp()                         - Check if payload is a valid ip\r\nisAlnum() / notAlnum()                   - Check if payload is alphanumeric\r\ncontains($needle) / notContains($needle) - Check if $needle exists in payload\r\nisSameAs($needle) / notSameAs($needle)   - Check if $needle is exactly the same as payload\r\nisRegex($regex) / notRegex($regex)       - Check if $regex matches payload\r\nisChars($chars) / notChars($chars)       - Check if $chars exist inside string\r\n```\r\n\r\n## Add your own validator\r\n\r\nIt's easy to add your own validators to Inspector. Below I added a\r\nvalidator to check if the payload contains _ninja_. You don't need to\r\nspecify ```is```/```not``` when you add validators, they gets added\r\nmagically. Also notice the number of arguments, ```$str``` is the string\r\ngetting tested. The error message argument is added automagically. There\r\nis a small ceavat when doing it this way. You can't create validators\r\nwith optional arguments. \r\n\r\n```php\r\n<?php\r\n\r\nInspector::addValidator(\"ninja\", function($str) {\r\n  return strpos($str, \"ninja\") !== false;\r\n});\r\n\r\n$inspector = new Inspector(array(\r\n  \"name\" => \"Inspector 'ninja' Gadget\",\r\n  \"email\" => \"inspector.gadget@localhost\"\r\n));\r\n\r\n// Check that \"ninja\" is present\r\n$inspector->ensure(\"name\")->isNinja(\"ninja is missing\");\r\n\r\n// Check that \"ninja\" is present (same as isNinja)\r\n$inspector->ensure(\"name\")->ninja(\"ninja is missing\");\r\n\r\n// Check that \"ninja\" is not present\r\n$inspector->ensure(\"email\")->notNinja(\"ninja is present\");\r\n$inspector->hasErrors(); // False\r\n```\r\n","tagline":"A easy and extendable validation library written in PHP.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}